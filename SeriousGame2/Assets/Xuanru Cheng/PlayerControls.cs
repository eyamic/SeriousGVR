//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Xuanru Cheng/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""9c3b7dc4-86fc-41b8-b941-c5c1ecb6ba24"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""55e2fedf-eaca-4262-a743-6dc1a37985a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""18551568-c956-4b1e-b415-d561d6bc59d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""PassThrough"",
                    ""id"": ""384def3c-0c35-4b88-846b-5cad14825126"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Effect"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c66e7590-e980-457b-8938-107908df65ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dialogue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ad76b373-064d-4872-bdb2-bee8f7d70523"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoorControl"",
                    ""type"": ""Button"",
                    ""id"": ""98c0eda9-186a-4fc0-a774-ad6d373a2394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Traffic"",
                    ""type"": ""Button"",
                    ""id"": ""70e98c47-e0a0-4964-af7c-9a91bb227f96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bus"",
                    ""type"": ""Button"",
                    ""id"": ""cf83ee36-0d60-4a3b-9520-78ab0c634a6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Doctor"",
                    ""type"": ""Button"",
                    ""id"": ""bee9ed7c-6d77-4558-bbe9-01b360d1dbd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickupPhone"",
                    ""type"": ""Button"",
                    ""id"": ""2f34ac68-7dfb-4aa0-b663-d4da073ea5f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flower"",
                    ""type"": ""Button"",
                    ""id"": ""1546aec1-d168-4235-9280-458b9bf31eaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NPC"",
                    ""type"": ""Button"",
                    ""id"": ""7c3871b1-3e7d-4e3e-95c0-00972eaa9093"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37e4fe54-3277-4109-8d74-97cfb098aa6c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9c908a2-934f-4d75-bd80-63aa38e9a880"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e7305bc-f417-4aaf-bf08-d7728a526faf"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d296ec24-f4cb-478a-8269-3aebb6a846d0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Effect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0fbdc7e-19a4-42d9-bd04-ee7346b6c465"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9367484-fbfb-42a3-a051-969696efc9eb"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoorControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f65c7b0-e986-4653-af58-1783ce9b245b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Traffic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6921100-56f4-4d4f-bb5a-eb82ad22e082"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b8086ce-2e11-4097-931e-d7e0c7d6c9dc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Doctor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16ae637a-f6d1-41ad-b653-1c72bb69355e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickupPhone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b082255-d32f-4a13-b2b9-80b630aa64bf"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""796f193d-39d2-41c0-a607-6dfc19ceebe6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""4f89e731-90e7-45fa-afd9-8a929f66effd"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""86410bcd-d152-4dd7-b1c5-435bf6459a17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OptionMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0b29c78d-0189-4c37-ae78-5e6d5664c03f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""b3e637b5-2999-4b73-a72f-04afc37f8bbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectButton"",
                    ""type"": ""Button"",
                    ""id"": ""85b01906-1674-4f5b-b397-2f63bb1c7f85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigateMenu"",
                    ""type"": ""Value"",
                    ""id"": ""146f9af8-71a3-4150-87dd-92435e270519"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6bd326a2-2630-4702-959c-0e7f90c167c0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OptionMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a96c6a16-10a8-43e9-a1a8-9e2bb0a7ac3f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f127c6f-fd1b-4a4c-a7ab-ee80aa6e1841"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad4d2198-c2e9-44e6-a69d-7ddcc3079be1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigateMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Rotate = m_Gameplay.FindAction("Rotate", throwIfNotFound: true);
        m_Gameplay_Pickup = m_Gameplay.FindAction("Pickup", throwIfNotFound: true);
        m_Gameplay_Effect = m_Gameplay.FindAction("Effect", throwIfNotFound: true);
        m_Gameplay_Dialogue = m_Gameplay.FindAction("Dialogue", throwIfNotFound: true);
        m_Gameplay_DoorControl = m_Gameplay.FindAction("DoorControl", throwIfNotFound: true);
        m_Gameplay_Traffic = m_Gameplay.FindAction("Traffic", throwIfNotFound: true);
        m_Gameplay_Bus = m_Gameplay.FindAction("Bus", throwIfNotFound: true);
        m_Gameplay_Doctor = m_Gameplay.FindAction("Doctor", throwIfNotFound: true);
        m_Gameplay_PickupPhone = m_Gameplay.FindAction("PickupPhone", throwIfNotFound: true);
        m_Gameplay_Flower = m_Gameplay.FindAction("Flower", throwIfNotFound: true);
        m_Gameplay_NPC = m_Gameplay.FindAction("NPC", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_OptionMenu = m_UI.FindAction("OptionMenu", throwIfNotFound: true);
        m_UI_PauseGame = m_UI.FindAction("PauseGame", throwIfNotFound: true);
        m_UI_SelectButton = m_UI.FindAction("SelectButton", throwIfNotFound: true);
        m_UI_NavigateMenu = m_UI.FindAction("NavigateMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Rotate;
    private readonly InputAction m_Gameplay_Pickup;
    private readonly InputAction m_Gameplay_Effect;
    private readonly InputAction m_Gameplay_Dialogue;
    private readonly InputAction m_Gameplay_DoorControl;
    private readonly InputAction m_Gameplay_Traffic;
    private readonly InputAction m_Gameplay_Bus;
    private readonly InputAction m_Gameplay_Doctor;
    private readonly InputAction m_Gameplay_PickupPhone;
    private readonly InputAction m_Gameplay_Flower;
    private readonly InputAction m_Gameplay_NPC;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Rotate => m_Wrapper.m_Gameplay_Rotate;
        public InputAction @Pickup => m_Wrapper.m_Gameplay_Pickup;
        public InputAction @Effect => m_Wrapper.m_Gameplay_Effect;
        public InputAction @Dialogue => m_Wrapper.m_Gameplay_Dialogue;
        public InputAction @DoorControl => m_Wrapper.m_Gameplay_DoorControl;
        public InputAction @Traffic => m_Wrapper.m_Gameplay_Traffic;
        public InputAction @Bus => m_Wrapper.m_Gameplay_Bus;
        public InputAction @Doctor => m_Wrapper.m_Gameplay_Doctor;
        public InputAction @PickupPhone => m_Wrapper.m_Gameplay_PickupPhone;
        public InputAction @Flower => m_Wrapper.m_Gameplay_Flower;
        public InputAction @NPC => m_Wrapper.m_Gameplay_NPC;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @Effect.started += instance.OnEffect;
            @Effect.performed += instance.OnEffect;
            @Effect.canceled += instance.OnEffect;
            @Dialogue.started += instance.OnDialogue;
            @Dialogue.performed += instance.OnDialogue;
            @Dialogue.canceled += instance.OnDialogue;
            @DoorControl.started += instance.OnDoorControl;
            @DoorControl.performed += instance.OnDoorControl;
            @DoorControl.canceled += instance.OnDoorControl;
            @Traffic.started += instance.OnTraffic;
            @Traffic.performed += instance.OnTraffic;
            @Traffic.canceled += instance.OnTraffic;
            @Bus.started += instance.OnBus;
            @Bus.performed += instance.OnBus;
            @Bus.canceled += instance.OnBus;
            @Doctor.started += instance.OnDoctor;
            @Doctor.performed += instance.OnDoctor;
            @Doctor.canceled += instance.OnDoctor;
            @PickupPhone.started += instance.OnPickupPhone;
            @PickupPhone.performed += instance.OnPickupPhone;
            @PickupPhone.canceled += instance.OnPickupPhone;
            @Flower.started += instance.OnFlower;
            @Flower.performed += instance.OnFlower;
            @Flower.canceled += instance.OnFlower;
            @NPC.started += instance.OnNPC;
            @NPC.performed += instance.OnNPC;
            @NPC.canceled += instance.OnNPC;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @Effect.started -= instance.OnEffect;
            @Effect.performed -= instance.OnEffect;
            @Effect.canceled -= instance.OnEffect;
            @Dialogue.started -= instance.OnDialogue;
            @Dialogue.performed -= instance.OnDialogue;
            @Dialogue.canceled -= instance.OnDialogue;
            @DoorControl.started -= instance.OnDoorControl;
            @DoorControl.performed -= instance.OnDoorControl;
            @DoorControl.canceled -= instance.OnDoorControl;
            @Traffic.started -= instance.OnTraffic;
            @Traffic.performed -= instance.OnTraffic;
            @Traffic.canceled -= instance.OnTraffic;
            @Bus.started -= instance.OnBus;
            @Bus.performed -= instance.OnBus;
            @Bus.canceled -= instance.OnBus;
            @Doctor.started -= instance.OnDoctor;
            @Doctor.performed -= instance.OnDoctor;
            @Doctor.canceled -= instance.OnDoctor;
            @PickupPhone.started -= instance.OnPickupPhone;
            @PickupPhone.performed -= instance.OnPickupPhone;
            @PickupPhone.canceled -= instance.OnPickupPhone;
            @Flower.started -= instance.OnFlower;
            @Flower.performed -= instance.OnFlower;
            @Flower.canceled -= instance.OnFlower;
            @NPC.started -= instance.OnNPC;
            @NPC.performed -= instance.OnNPC;
            @NPC.canceled -= instance.OnNPC;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_OptionMenu;
    private readonly InputAction m_UI_PauseGame;
    private readonly InputAction m_UI_SelectButton;
    private readonly InputAction m_UI_NavigateMenu;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @OptionMenu => m_Wrapper.m_UI_OptionMenu;
        public InputAction @PauseGame => m_Wrapper.m_UI_PauseGame;
        public InputAction @SelectButton => m_Wrapper.m_UI_SelectButton;
        public InputAction @NavigateMenu => m_Wrapper.m_UI_NavigateMenu;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @OptionMenu.started += instance.OnOptionMenu;
            @OptionMenu.performed += instance.OnOptionMenu;
            @OptionMenu.canceled += instance.OnOptionMenu;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
            @SelectButton.started += instance.OnSelectButton;
            @SelectButton.performed += instance.OnSelectButton;
            @SelectButton.canceled += instance.OnSelectButton;
            @NavigateMenu.started += instance.OnNavigateMenu;
            @NavigateMenu.performed += instance.OnNavigateMenu;
            @NavigateMenu.canceled += instance.OnNavigateMenu;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @OptionMenu.started -= instance.OnOptionMenu;
            @OptionMenu.performed -= instance.OnOptionMenu;
            @OptionMenu.canceled -= instance.OnOptionMenu;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
            @SelectButton.started -= instance.OnSelectButton;
            @SelectButton.performed -= instance.OnSelectButton;
            @SelectButton.canceled -= instance.OnSelectButton;
            @NavigateMenu.started -= instance.OnNavigateMenu;
            @NavigateMenu.performed -= instance.OnNavigateMenu;
            @NavigateMenu.canceled -= instance.OnNavigateMenu;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnEffect(InputAction.CallbackContext context);
        void OnDialogue(InputAction.CallbackContext context);
        void OnDoorControl(InputAction.CallbackContext context);
        void OnTraffic(InputAction.CallbackContext context);
        void OnBus(InputAction.CallbackContext context);
        void OnDoctor(InputAction.CallbackContext context);
        void OnPickupPhone(InputAction.CallbackContext context);
        void OnFlower(InputAction.CallbackContext context);
        void OnNPC(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnOptionMenu(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
        void OnSelectButton(InputAction.CallbackContext context);
        void OnNavigateMenu(InputAction.CallbackContext context);
    }
}
